input {
        file {
             path => "C:/Program Files/Forum Systems/xmlserver/logging/system/*.xml"
             start_position => "beginning"
             mode => "tail"
             sincedb_path => "nul"
			 codec => multiline {
				  pattern => "^<r><d>"
				  negate => true
				  what => previous
				}
        }
}
        
filter {
        xml {
            source => "message"
			store_xml => false
			xpath => [
			            "//r/d/text()", "Time",
						"//r/se/text()", "SessionID",
						"//r/mc/text()", "Code",
						"//r/m/text()", "Data"
			]
			force_array => false
        }
		
		ruby {
            code => "	
                event.set('Date', [event.get('path').split('/')[-1].split('.')[-2].split('_')[-1], event.get('path').split('/')[-1].split('.')[-2].split('_')[-3], event.get('path').split('/')[-1].split('.')[-2].split('_')[-2]].join('-'))		    
                event.set('Timestamp', [event.get('Date'), event.get('Time')].join(' '))
            "
        }
		
		mutate {strip => ["Code", "Code"]}
		mutate {strip => ["SessionID", "SessionID"]}
		mutate {remove_field => ["Time"]}
		
		date {
			  match => ["Timestamp", "ISO8601", "YYYY-MM-dd HH:mm:ss.SSS"]
			  target => "@timestamp"
			  remove_field => ["Timestamp"]
		}
		
		if [Code] == "09140" {
			mutate{
			    gsub => [
				    "Data", "Received an HTTP request:", ""
				]
			}
			
			mutate{
			    gsub => [
				    "Data", "Header Info:", ""
				]
			}
			
			mutate{
			    gsub => [
				    "Data", "Auth Type:", ""
				]
			}
			
			mutate{
			    gsub => [
				    "Data", "Cookies:", ""
				]
			}
			
			mutate{
			    gsub => [
				    "Data", "Request URL", "Request-URL"
				]
			}
			
		    kv {
			    source => "Data"
                field_split => "\n"		
                value_split => ": "
                trim_key => " "
                trim_value => " "			
			}
			
			mutate {
				remove_field => [ "Data" ]
			  }
			mutate {
				remove_field => [ "message" ]
			  }
			mutate {
				uppercase => [ "PartyId", "Method" ]
			  }
			
			if [Request-URL] {
				mutate {
					split => ["Request-URL", "?"]
					add_field => { "shortRequest-URL" => "%{Request-URL[0]}" }
				  }
				mutate {
					rename => ["shortRequest-URL", "Request-URL" ]
				  }
			 }
			
			if [Content-Type] {
			
			    grok {
				   match => {"Content-Type" => "action=\"(?<content-url>.*)\"" } 
				   add_field => { "content-url" => "%{content-url}" }
				}
			
				
			    if [content-url] {
				    mutate {
					    gsub => [
				            "content-url", "&quot;", ""
				        ]
					  }
					 
					mutate {
					    gsub => [
				            "content-url", "\"", ""
				        ]
					  }
					  
				    mutate {
                        split => ["content-url", "?"]
                        add_field => { "action" => "%{content-url[0]}" }
                      }
				}
			}
			
			mutate {
				add_field => {
					joint => "."
					URL => "%{Method}%{joint}%{Request-URL}"
				}
				remove_field => ["joint", "Request-URL"]
			}
			
			  
			mutate { add_tag => ["sessionstart"] }
			 
			aggregate{
			    task_id => "%{SessionID}"
				code => "
				         map['URL'] = event.get('URL');
				         map['Party_id'] = event.get('PartyId');
						 map['action'] = event.get('action');
             map['RequestUserAgent'] =  event.get('User-Agent')
						"
				map_action => "create"
			}
			
			
		
		}
		
		else if [Code] == "0840D" {
		    mutate{
			    gsub => [
				    "Data", "Sending client a processed response:", ""
				]
			}
			mutate{
			    gsub => [
				    "Data", "Header Info:", ""
				]
			}
			
		    kv {
			    source => "Data"
                
                field_split => "\n"		
                value_split => ": "
                trim_key => " "
                trim_value => " "	
                include_keys => ["Status Code", "TransactionId"]					
			}
			mutate {
				remove_field => [ "Data", "message" ]
			  }
			mutate { add_tag => ["sessionend"] }
			
			aggregate{
			    task_id => "%{SessionID}"
				code => "
				         event.set('URL', map['URL']);
				         event.set('PartyId', map['Party_id']);
		                 event.set('action', map['action']);
						 event.set('proxyaction', map['proxyaction']);
						 event.set('proxyurl', map['proxyurl']);
             event.set('RequestUserAgent', map['RequestUserAgent']);
						"
				end_of_task => true
				timeout=>1000
			}
			
			
			translate {
				field => "[PartyId]"
				destination => "[FundId]"
				dictionary => {
				     "0137AA5404CB44E0A976DA67DEC3F220" => "UHF" 
					 "0493EAE8E1894A9587FA0CB79760D5C4" => "PHNX"
					 "10C639F1F8274EB0BBC4896708CE2441" => "PPL" 
					 "17D9DDEEBA4F4155BEE8BCBE1A1337CE" => "NHBA"
					 "1CE8BD9AF69A4867B352B34027CFAC89" => "ACA" 
					 "30B8B3BF60AB46CAA785A0CD1759F52C" => "PRIMARYHEALTHCARE" 
					 "4305053F45894A3AAD884CBF04339682" => "NMH" 
					 "46A64C49580D4D0FA216843C02DB1255" => "UNIHEALTH" 
					 "4BF3BFE6757B4156B33EA705B23E1564" => "RSBH" 
					 "5C722521605D4499BC5C20CDF6D8B7DD" => "AIA" 
					 "659BA4DD04E84C1AAB747C92AF8299A4" => "DOC" 
					 "67185FAD048743D0AC71362D2620312E" => "ESH" 
					 "7410B83BD8BF4321B1DD306F23F82CCE" => "ADF" 
					 "7A6B75151E2D4E2F9274E52FEF662C68" => "TUH"
					 "7E517296757C4298B53386514D1F9C8A" => "TCHRS" 
					 "80AA8A826F6148EDBB50C5AEF62977A5" => "CUA" 
					 "84889FB89D2946E7BD000E64A1048954" => "NTH" 
					 "887C661930CD40D1BBE84E1EFA4CBC2F" => "DFNCE" 
					 "8EF35458583B4BD79484ADFB18CD71AA" => "ALLIANZ" 
					 "9AC8E3C542EE408094405D9E51955192" => "POL" 
					 "A91BE1A1BC834EA69F719B9BA2A7CF34" => "CDH"
					 "AAC33D45CE114DC1AC5A44895C455501" => "TRANS" 
					 "B09123F5E0DD40B884B47734C81D7C9D" => "MLDRA"
					 "CAF0CF63F60240EEB4C6576EE7BCCDD1" => "LTRBE" 
					 "D2396F69389740028CE6B53A396D7C64" => "QCH"
					 "D2A59EA6CB594024AF226989AF5422EA" => "HCI" 
					 "DDEDE6620A124345A9BF40B9837F06AD" => "HEA" 
					 "E41DB408FA314C43A98DF80E5B854BCE" => "HAMBS" 
					 "E812522B6E234D9395FFCB9B3FC7106B" => "HIF" 
					 "FA61FAB23203453BBFABA961FBE86E94" => "NAVY" 
					 "22C260005E5945D1BF676DCF2112AAAA" => "GMHBA" 
					 "2FBF689230274435909D873D94F7B8F6" => "GMF" 
					 "44375755B4E9410787E90C2CF03CEA10" => "STLUK" 
					 "017F34087CE34125B2FF4E50A4D3FE2C" => "DHL" 
	                 "22C260005E5945D1BF676DCF2112CA14" => "DHL" 
	                 "A7299703306D4195AF1C141BF55AB90F" => "DHL" 
	                 "8E6BC45D49804C3FA11FEA3FF881D3F2" => "HSL" 
                     "F61D522FFB8843FEA0F17010C8091C9E" => "HSL" 
	                 "04CF8E9D8BA44370AB28FC4F57AC9CAF" => "HMR" 
	                 "68392EB3D2E14740A98066484FC9CA8A" => "AIA" 
	                 "230A286C2A54427692185B4DFCFBEB02" => "PHF"
	                 "597DC3BFCD134BAE88B4E07E00CF5235" => "NMT"
	                 "1ED3CE6BCE3147158FAE894918F2A264" => "THF"
	                 "CCFADFD045B2450F9AF613004513E81B" => "UNT"
				}
				fallback => "Unknown"
			  }
			
      if [RequestUserAgent] != "Forum Systems" {
  			if [URL] =~ /\/api\/v1\// or [URL] =~ /\/token$/ {
  			    translate {
  					field => "[URL]"
  					destination => "[ServiceName]"
  					dictionary => {
  						     "POST.*/api/v1/documentProcesses$" => "AddDocumentProcess"  
  							 "POST.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/benefitQuotes$" => "BenefitQuotes"  
  							 "GET.*/api/v1/claims/(?<claimId>[^\?/$]+)/claimlines/(?<claimLineId>[^\?/$]+)/messages" => "GetClaimLineMessages"  
  							 "GET.*/api/v1/claimParameters/(?<parameterId>[^\?/$]+)" => "GetClaimParameter"  
  							 "GET.*/api/v1/healthFunds/(?<healthFundCode>[^\?/$]+)" => "GetHealthFund"  
  							 "GET.*/api/v1/healthFunds$" => "GetHealthFunds"  
  							 "GET.*/api/v1/rebateRateAdjustments(?<queryparams>\?.*|$)" => "GetRebateRateAdjustments"  
  							 "GET.*/api/v1/transferRequestStatuses" => "GetTransferRequestStatuses"  
  							 "PUT.*/api/v1/transferRequestStatuses" => "PutTransferRequestStatuses"  
  							 "GET.*/api/v1/communicationGroups/(?<type>[^\?/$]+)(?<queryparams>\?.*|$)" => "GetCommunicationGroups"  
  							 "GET.*/api/v1/communicationMedia(?<queryparams>\?.*|$)" => "GetCommunicationMedia"  
  							 "POST.*/api/v1/arrearsProcesses$" => "AddArrearsProcess"  
  							 "POST.*/api/v1/billingProcesses$" => "AddBillingProcess"  
  							 "GET.*/api/v1/arrearsProcesses/(?<processId>[^\?/$]+)/memberships$" => "GetArrearsProcessMemberships"  
  							 "POST.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/rateQuote" => "GetMembershipRateQuote"  
  							 "POST.*/api/v1/arrearsProcesses/(?<processId>[^\?/$]+)/complete(?<queryparams>\?.*|$)" => "CompleteArrearsProcess"  
  							 "POST.*/api/v1/billingProcesses/(?<processId>[^\?/$]+)/complete$" => "CompleteBillingProcess"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/calculateStandardAmount(?<queryparams>\?.*|$)" => "CalculateStandardAmount"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/computeAmount(?<queryparams>\?.*|$)" => "ComputeAmount"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/computeDate(?<queryparams>\?.*|$)" => "ComputeDate"  
  							 "POST.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/benefitLimitStatuses$" => "GetMembershipBenefitLimitStatuses"  
  							 "POST.*/api/v1/rateQuote" => "GetRateQuotes"  
  							 "POST.*/api/v1/processClaimData$" => "ProcessClaimData"  
  							 "POST.*/api/v1/submitAndUpdateTransaction$" => "SubmitAndUpdateTransaction"  
  							 "POST.*/api/v1/SubmitTransaction$" => "SubmitTransaction"  
  							 "GET.*/api/v1/pushNotificationProcesses(?<queryparams>\?.*|$)" => "GetPushNotificationProcesses"  
  							 "GET.*/api/v1/pushNotificationProcesses/(?<pushNotificationProcessId>[^\?/$]+)/items(?<queryparams>\?.*|$)" => "GetPushNotificationProcessItems"  
  							 "GET.*/api/v1/pushNotificationTypes(?<queryparams>\?.*|$)" => "GetPushNotificationTypes"  
  							 "POST.*/api/v1/pushNotificationProcesses$" => "PostPushNotificationProcesses"  
  							 "PUT.*/api/v1/pushNotificationTypes/(?<pushNotificationTypeCode>[^\?/$]+)(?<queryparams>\?.*|$)" => "PutPushNotificationType"  
  							 "POST.*/api/v1/emailAddressValidator$" => "ValidateEmailAddresses"  
  							 "POST.*/api/v1/cms(?<queryparams>\?.*|$)" => "PublishConfiguration"  
  							 "GET.*/api/v1/clinicalCategories$" => "GetClinicalCategories"  
  							 "GET.*/api/v1/fundReferenceParameters/(?<parameterId>[^\?/$]+)" => "GetFundReferenceParameter"  
  							 "GET.*/api/v1/locations/(?<locationCode>[^\?/$]+)(?<queryparams>\?.*|$)" => "GetLocation"  
  							 "POST.*/api/v1/getMessages$" => "GetMessages"  
  							 "GET.*/api/v1/transferRequestStatusWorkflows" => "GetTransferRequestStatusWorkflows"  
  							 "PUT.*/api/v1/transferRequestStatusWorkflows" => "UpdateTransferRequestStatusWorkflows"  
  							 "POST.*/api/v1/memberships/(?<transactionCode>[^\?/$]+)/pvtMessages$" => "AddTransferRequestPVT"  
  							 "POST.*/api/v1/transferRequests/(?<transactionCode>[^\?/$]+)/tccMessages$" => "AddTransferRequestTCC"  
  							 "POST.*/api/v1/transferRequests/(?<transactionCode>[^\?/$]+)/tcdMessages(?<queryparams>\?.*|$)" => "AddTransferRequestTCD"  
  							 "POST.*/api/v1/transferRequests$" => "AddTransferRequestTCR"  
  							 "POST.*/api/v1/memberships/(?<transactionCode>[^\?/$]+)/tcsMessages$" => "AddTransferRequestTCS"  
  							 "POST.*/api/v1/transferRequests/(?<transactionCode>[^\?/$]+)/trrMessages$" => "AddTransferRequestTRR"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/transferRequests(?<queryparams>\?.*|$)" => "GetMembershipTransferRequests"  
  							 "POST.*/api/v1/inboundTransferRequestMessages$" => "AddInboundTransferRequestMessage"  
  							 "POST.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/comments" => "AddMembershipComment"  
  							 "POST.*/api/v1/outboundTransferRequestMessages$" => "AddOutboundTransferRequestMessage"  
  							 "POST.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/deletePassword$" => "DeletePassword"  
  							 "GET.*/api/v1/billingProcesses/(?<processId>[^\?/$]+)$" => "GetBillingProcess"  
  							 "GET.*/api/v1/invoiceNumberRanges$" => "GetInvoiceNumberRanges"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/agents(?<queryparams>\?.*|$)" => "GetMembershipAgents"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/branches(?<queryparams>\?.*|$)" => "GetMembershipBranches"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/persons/(?<personId>[^\?/$]+)/cards/(?<cardId>[^\?/$]+)/persons$" => "GetMembershipCardPersons"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/comments(?<queryparams>\?.*|$)" => "GetMembershipComments"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/debitAccounts" => "GetMembershipDebitAccounts"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/eligibilityReasons(?<queryparams>\?.*|$)" => "GetMembershipEligibilityReasons"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/emailAddresses(?<queryparams>\?.*|$)" => "GetMembershipEmailAddresses"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/groups(?<queryparams>\?.*|$)" => "GetMembershipGroups"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/persons(?<queryparams>\?.*|$)" => "GetMembershipPersons"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/persons/(?<personId>[^\?/$]+)/cards(?<queryparams>\?.*|$)" => "GetMembershipPersonsCards"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/persons/(?<personId>[^\?/$]+)/previousCovers(?<queryparams>\?.*|$)" => "GetMembershipPersonsPreviousCovers"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/phoneNumbers(?<queryparams>\?.*|$)" => "GetMembershipPhoneNumbers"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/plans(?<queryparams>\?.*|$)" => "GetMembershipPlans"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/properties(?<queryparams>\?.*|$)" => "GetMembershipProperties"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/rebateMessages(?<queryparams>\?.*|$)" => "GetMembershipRebateMessages"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/rebateRevisions$" => "GetMembershipRebateRevisions"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/rebate(?<queryparams>\?.*|$)" => "GetMembershipRebates"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/sites(?<queryparams>\?.*|$)" => "GetMembershipSites"  
  							 "GET.*/api/v1/transferRequests/(?<transactionCode>[^\?/$]+)$" => "GetTransferRequest"  
  							 "GET.*/api/v1/transferRequests/(?<transactionCode>[^\?/$]+)/messages/(?<transferRequestMessageId>[^\?/$]+)/errors$" => "GetTransferRequestMessageErrors"  
  							 "GET.*/api/v1/transferRequests/(?<transactionCode>[^\?/$]+)/messages$" => "GetTransferRequestMessages"  
  							 "GET.*/api/v1/transferRequests/(?<transactionCode>[^\?/$]+)/messages/(?<transferRequestMessageId>[^\?/$]+)/xml$" => "GetTransferRequestMessageXml"  
  							 "GET.*/api/v1/transferRequestProductTypes$" => "GetTransferRequestProductTypes"  
  							 "POST.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/plans$" => "PostMembershipPlans"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/addresses(?<queryparams>\?.*|$)" => "SearchMembershipAddresses"  
  							 "PUT.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/comments/(?<commentId>[^\?/$]+)(?<queryparams>\?.*|$)" => "UpdateMembershipComment"  
  							 "POST.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/refundPayments" => "AddMembershipRefundPayment"  
  							 "POST.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/deletePlans$" => "DeleteMembershipPlans"  
  							 "DELETE.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/plans/(?<planId>[^\?/$]+)/waitingPeriods/(?<waitingPeriodCode>[^\?/$]+)" => "DeleteMembershipPlanWaitingPeriodWaive"  
  							 "DELETE.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/rebateRevisions/(?<rebateRevisionId>[^\?/$]+)(?<queryparams>\?.*|$)" => "DeleteMembershipRebateRevisions"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/benefitLimitStatuses(?<queryparams>\?.*|$)" => "GetMembershipBenefitLimitStatuses"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/communicationGroups(?<queryparams>\?.*|$)" => "GetMembershipCommunicationGroups"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/persons/(?<personId>[^\?/$]+)/childStatuses(?<queryparams>\?.*|$)" => "GetMembershipPersonChildStatuses"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/waitingPeriods(?<queryparams>\?.*|$)" => "GetMembershipPersonWaitingPeriods"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/plans/(?<planId>[^\?/$]+)/waitingPeriods(?<queryparams>\?.*|$)" => "GetMembershipPlanWaitingPeriods"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/rebatePercentage(?<queryparams>\?.*|$)" => "GetMembershipRebatePercentage"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/nextPaymentAmount$" => "GetNextPaymentAmount"  
  							 "POST.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/reactivations$" => "PostMembershipReactivation"  
  							 "POST.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/rebateSavingsProvisions" => "PostRebateSavingsProvision"  
  							 "POST.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/rebateWithdrawals" => "PostRebateWithdrawal"  
  							 "GET.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/communications(?<queryparams>\?.*|$)" => "SearchCommunications"  
  							 "POST.*/api/v1/searchMemberships" => "SearchMemberships"  
  							 "PUT.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/persons/(?<personId>[^\?/$]+)/revisions/(?<revisionId>[^\?/$]+)/waitingPeriods/(?<waitingPeriodCode>[^\?/$]+)" => "VaryMembershipPersonWaitingPeriod"  
  							 "PUT.*/api/v1/memberships/(?<membershipId>[^\?/$]+)/plans/(?<planId>[^\?/$]+)/waitingPeriods/(?<waitingPeriodCode>[^\?/$]+)" => "WaiveMembershipPlanWaitingPeriod"  
  							 "GET.*/api/v1/persons/(?<personId>[^\?/$]+)/communicationGroups(?<queryparams>\?.*|$)" => "GetPersonCommunicationGroups"  
  							 "GET.*/api/v1/persons/(?<personId>[^\?/$]+)/devices/(?<deviceId>[^\?/$]+)/pushNotificationTypes" => "GetPersonDevicePushNotificationTypes"  
  							 "POST.*/api/v1/personsPushNotificationProcesses$" => "PostPersonPushNotificationProcesses"  
  							 "PUT.*/api/v1/persons/(?<personId>[^\?/$]+)/devices/(?<deviceId>[^\?/$]+)/pushNotificationTypes" => "PutPersonDevicePushNotificationTypes"  
  							 "POST.*/api/v1/persons/(?<personId>[^\?/$]+)/properties" => "AddPersonProperty"  
  							 "DELETE.*/api/v1/persons/(?<personId>[^\?/$]+)/properties/(?<personPropertyId>[^\?/$]+)" => "DeletePersonProperty"  
  							 "GET.*/api/v1/mobileApp/exceptions(?<queryparams>\?.*|$)" => "GetMobileAppExceptions"  
  							 "GET.*/api/v1/persons/(?<personId>[^\?/$]+)$" => "GetPerson"  
  							 "GET.*/api/v1/persons/(?<personId>[^\?/$]+)/creditAccounts(?<queryparams>\?.*|$)" => "GetPersonCreditAccounts"  
  							 "GET.*/api/v1/persons/(?<personId>[^\?/$]+)/devices/(?<deviceId>[^\?/$]+)(?<queryparams>\?.*|$)" => "GetPersonDevice"  
  							 "GET.*/api/v1/persons/(?<personId>[^\?/$]+)/devices$" => "GetPersonDevices"  
  							 "POST.*/api/v1/personDevices/(?<queryparams>\?.*|$)" => "GetPersonDevices_PersonIds"  
  							 "GET.*/api/v1/personDevices/(?<queryparams>\?.*|$)" => "GetPersonDevices_Status"  
  							 "GET.*/api/v1/persons/(?<personId>[^\?/$]+)/discountAgeRevisions(?<queryparams>\?.*|$)" => "GetPersonDiscountAgeRevisions"  
  							 "GET.*/api/v1/persons/(?<personId>[^\?/$]+)/emailAddresses(?<queryparams>\?.*|$)" => "GetPersonEmailAddresses"  
  							 "GET.*/api/v1/persons/(?<personId>[^\?/$]+)/phoneNumbers(?<queryparams>\?.*|$)" => "GetPersonPhoneNumbers"  
  							 "POST.*/api/v1/getPersons$" => "GetPersons"  
  							 "GET.*/api/v1/persons/(?<personId>[^\?/$]+)/studentDeclarations(?<queryparams>\?.*|$)" => "GetPersonStudentDeclarations"  
  							 "POST.*/api/v1/mobileApp/exceptions$" => "PostMobileAppException"  
  							 "PUT.*/api/v1/persons/(?<personId>[^\?/$]+)/devices/(?<deviceId>[^\?/$]+)(?<queryparams>\?.*|$)" => "PutPersonDevice"  
  							 "GET.*/api/v1/persons/(?<personId>[^\?/$]+)/addresses(?<queryparams>\?.*|$)" => "SearchPersonAddresses"  
  							 "GET.*/api/v1/persons/(?<personId>[^\?/$]+)/properties(?<queryparams>\?.*|$)" => "SearchPersonProperties"  
  							 "PUT.*/api/v1/persons/(?<personId>[^\?/$]+)/properties/(?<personPropertyId>[^\?/$]+)" => "UpdatePersonProperty"  
  							 "POST.*/api/v1/phoneNumberValidator$" => "ValidatePhoneNumbers"  
  							 "GET.*/api/v1/products/(?<productCode>[^\?/$]+)/clinicalCategories(?<queryparams>\?.*|$)" => "GetProductClinicalCategories"  
  							 "GET.*/api/v1/productRates/(?<productRateCode>[^\?/$]+)(?<queryparams>\?.*|$)" => "GetProductRate"  
  							 "POST.*/api/v1/getComponents" => "GetComponents"  
  							 "GET.*/api/v1/products/(?<productCode>[^\?/$]+)(?<queryparams>\?.*|$)$" => "GetProduct"  
  							 "GET.*/api/v1/products/(?<productId>[^\?/$]+)/componentRevisions(?<queryparams>\?.*|$)" => "GetProductComponentRevisions"  
  							 "GET.*/api/v1/productRates/(?<productRateCode>[^\?/$]+)/revisions(?<queryparams>\?.*|$)" => "GetProductRateRevisions"  
  							 "POST.*/api/v1/getProductRates" => "GetProductRates"  
  							 "POST.*/api/v1/getProducts" => "GetProducts"  
  							 "GET.*/api/v1/products(?<queryparams>\?.*|$)" => "GetProductsByTier"  
  							 "GET.*/api/v1/productTiers$" => "GetProductTiers"  
  							 "GET.*/api/v1/waitingperiods/(?<waitingPeriodCode>[^\?/$]+)" => "GetWaitingPeriod"  
  							 "POST.*/api/v1/searchProducts(?<queryparams>\?.*|$)" => "SearchProducts"  
  					}
  					regex => true 
  			    }
  				
  				mutate{
  				    add_field => {Server => "IE"}
  				}
  				mutate{
  				    add_field => {Protocol => "REST"}
  				}
  				
  				if !([ServiceName]) {
  					if [URL] =~ /\/cms\// {
  						mutate{
  							add_field => {ServiceName => "GetCmsFile"}
  						}
  					}
            else {
							ruby{
								code => " 
								          url_array = event.get('URL').split('/api/v1/').last.split('/').map(&:capitalize)
								          method_array = url_array.select{ |i| i.match(/^[a-zA-Z]+$/) }.select{ |i| i.downcase != 'null' }.join('')
										  method_type = event.get('URL').split('.').first.capitalize										  
										  service_name = method_type + method_array
										  event.set('ServiceName', service_name)
										"
							}
						}
  				}
  			}
  							
  			else if [action]{
  			
  			    ruby{
  				    code => "
  					          event.set('ServiceName', event.get('action').split('/').last)
  					        "
  				}
  				
  			    mutate{
  			        add_field => {Server => "BT"}
  			    }
  				mutate{
  			        add_field => {Protocol => "SOAP"}
  			    }
  			}
  			
  			else if [proxyaction] {
  			
  			    ruby{
  				    code => "
  					          event.set('ServiceName', event.get('proxyaction').split('/').last)
  					        "
  				}
  			    mutate{
  			        add_field => {Server => "BT"}
  			    }
  				mutate{
  			        add_field => {Protocol => "REST"}
  			    }
  			}
  			
  			else if [proxyurl] {
  			    mutate{
  			        add_field => {ServiceName => "No name only proxyurl"}
  			    }
  			    mutate{
  			        add_field => {Server => "BT"}
  			    }
  				mutate{
  			        add_field => {Protocol => "REST"}
  			    }
  			}
  			
  			else if [Server] {
  			    mutate{
  			        add_field => {Server => "BT"}
  					lowercase => ["URL"]
  			    }
  				mutate{
  			        add_field => {ServiceName => "No name only server"}
  			    }
  				if [URL] =~ /.svc$/ {
  				    mutate{
  			            add_field => {Protocol => "SOAP"}
  			        }
  				}
  				else {
  				    mutate{
  			            add_field => {Protocol => "REST"}
  			        }
  				}
  			}			
      }
		}
		
		else if [Code] == "0840B" {
		    mutate{
			    gsub => [
				    "Data", "Sending remote server a processed request:", ""
				]
			}
			mutate{
			    gsub => [
				    "Data", "Header Info:", ""
				]
			}
			mutate{
			    gsub => [
				    "Data", "Remote Path", "Remote-Path"
				]
			}
			
		    kv {
			    source => "Data"
                
                field_split => "\n"		
                value_split => ": "
                trim_key => " "
                trim_value => " "		
                include_keys => ["Status Code", "TransactionId", "Remote-Path", "PartyId", "Content-Type"]					
			}
			
			mutate {
				remove_field => [ "Data", "message" ]
			  }
			mutate {
                split => ["Remote-Path", "?"]
                add_field => { "shortRemote-Path" => "%{Remote-Path[0]}" }
              }
			mutate {
                rename => ["shortRemote-Path", "Remote-Path" ]
              }
			  
			if [Content-Type] {
			
			    grok {
				   match => {"Content-Type" => "action=\"(?<content-url>.*)\"" } 
				   add_field => { "proxy-content-url" => "%{content-url}" }
				}
			
				
			    if [content-url] {
				    mutate {
					    gsub => [
				            "proxy-content-url", "&quot;", ""
				        ]
					  }
					 
					mutate {
					    gsub => [
				            "proxy-content-url", "\"", ""
				        ]
					  }
					  
				    mutate {
                        split => ["proxy-content-url", "?"]
                        add_field => { "action" => "%{proxy-content-url[0]}" }
                      }
				}
			}
			
		    mutate {
				add_field => {
					joint => "."
					Path => "%{Method}%{joint}%{Remote-Path}"
				}
				remove_field => ["joint", "Remote-Path"]
			}
			  
			aggregate{
			    task_id => "%{SessionID}"
				code => "
				         if !(map['URL']) 
				             map['URL'] = event.get('Path')
						 end
						 if !(map['Party_id'])
				            map['Party_id'] = event.get('PartyId')
						 end

					    "
				map_action => "update"
			}
			
			aggregate{
			    task_id => "%{SessionID}"
				code => "
						 map['proxyaction'] = event.get('action')
						 map['proxyurl'] = event.get('Path')
					    "
				map_action => "create"
			}
			
			mutate {
				uppercase => [ "PartyId" ]
			  }
			
		}
		
		elapsed {
			start_tag => "sessionstart"
			end_tag => "sessionend"
			unique_id_field => "SessionID"
		}
		
		mutate{
		    gsub => ["Date", "-", "_"]
		}
}

output { 
       elasticsearch {
	                 hosts => ["your url and port"]
					 user => "your account name"
					 password => "your passport"
                     index => "your index name"
                     document_type => "doc"
       }     
       stdout {}
}