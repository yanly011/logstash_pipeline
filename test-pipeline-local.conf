input {
        file {
             path => "C:/Users/hsllya/Downloads/logstash/prodlogging-small-1.csv"
             start_position => "beginning"
             sincedb_path => "nul"
        }
}
        
filter {
        csv {
                separator => ","
                 columns => [ "Timestamp", "SeverityName", "EventName", "EntityName", "Application", "Operation", "TransactionId", "SessionId", "OperationId", "PartyName", "ClientId", "Host", "LogId" ]
            }
			
		mutate {convert => ["SeverityName", "string"]}
		mutate {convert => ["EventName", "string"]}
		mutate {convert => ["EntityName", "string"]}
		mutate {convert => ["Application", "string"]}
		mutate {convert => ["Operation", "string"]}
		mutate {convert => ["TransactionId", "string"]}
		mutate {convert => ["SessionId", "string"]}
		mutate {convert => ["OperationId", "string"]}
		mutate {convert => ["PartyName", "string"]}
		mutate {convert => ["ClientId", "string"]}
		mutate {convert => ["Host", "string"]}
		mutate {convert => ["LogId", "integer"]}
		
			
		date {
			  match => ["Timestamp", "YYYY-MM-dd HH:mm:ss.SSS"]
			  target => "@timestamp"
			  remove_field => ["Timestamp"]
		}
			
		if [EventName] == "Sending" and [EntityName] == "Response" {
		    
			elasticsearch {
			    index => "logstash_test_0"
				query => "EventName:Received AND EntityName:Request AND SessionId:%{[SessionId]}"
				fields => { "@timestamp" => "started" }
			}
			
			date {
				  match => ["[started]", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601"]
				  target => "[started]"
			}			 	
        
		    ruby {
				  code => "
				        event.set('duration', (event.get('@timestamp') - event.get('started')) * 1000) 				
						"
			}	
		}		
}

output {
       elasticsearch {
                     index => "logstash_test_0"
                     document_type => "logtestdoc"
       }
       stdout {}
}