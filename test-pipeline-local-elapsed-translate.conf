input {
        beats {
            port => 5044
         }
}
        
filter {
        csv {
            separator => ","
            columns => [ "LogId", "Timestamp", "TransactionId", "ClientId", "UserId", "Host", "SeverityId", "Application", "EventId", "EntityId", "Operation", "SessionId", "OperationId" ]
        }
		
		mutate {convert => ["LogId", "integer"]}
		mutate {convert => ["SeverityId", "string"] strip => ["SeverityId", "SeverityId"] }
		mutate {convert => ["EventId", "string"] strip => ["EventId", "EventId"] }
		mutate {convert => ["EntityId", "string"] strip => ["EntityId", "EntityId"]}
		mutate {strip => ["Application", "Application"] convert => ["Application", "string"]}
		mutate {convert => ["Operation", "string"]}
		mutate {strip => ["TransactionId", "TransactionId"] convert => ["TransactionId", "string"]}
		mutate {strip => ["SessionId", "SessionId"] convert => ["SessionId", "string"]}
		mutate {strip => ["ClientId", "ClientId"] convert => ["ClientId", "string"]}
		mutate {strip => ["Host", "Host"] convert => ["Host", "string"]}
				
					
		date {
			  match => ["Timestamp", "ISO8601", "YYYY-MM-dd HH:mm:ss.SSS"]
			  target => "@timestamp"
			  remove_field => ["Timestamp"]
		}
		
		translate {
			field => "[SeverityId]"
			destination => "[SeverityName]"
			dictionary => {
			  "1" => "Exception"
			  "2" => "Error"
			  "3" => "Warning"
			  "4" => "Information"
			  "5" => "Verbose"
			  "6" => "Trace"
			}
			remove_field => ["SeverityId"]
		  }
		 
		translate {
			field => "[EventId]"
			destination => "[EventName]"
			dictionary => {
			  "1" => "Sending"
			  "2" => "Received"
			  "3" => "Processing"
			  "4" => "Reading"
			  "5" => "Writing"
			}
			remove_field => ["EventId"]
		  }
		  
		 translate {
			field => "[EntityId]"
			destination => "[EntityName]"
			dictionary => {
			  "1" => "Request"
			  "2" => "Response"
			  "3" => "Message"
			  "4" => "Query"
			  "5" => "Service"
			  "6" => "File"
			}
			remove_field => ["EntityId"]
		  }
			
		if [EventName] == "Sending" and [EntityName] == "Response" {
		    mutate { add_tag => ["sessionend"] }
		}
		else if[EventName] == "Received" and [EntityName] == "Request"{
		    mutate { add_tag => ["sessionstart"] }
		}
					
		elapsed {
			start_tag => "sessionstart"
			end_tag => "sessionend"
			unique_id_field => "SessionId"
		}
				
}

output {
       elasticsearch {
	             hosts => [""]
		     user => ""
		     password => ""
                     index => "small_original_logs_test"
                     document_type => "originallogtestdoc"
       }
       stdout {}
}
